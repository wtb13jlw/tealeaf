Quiz: Lesson 2

Some exercises from lesson 2 materials:

1.  Name what each of the below is:


  (a = 1   # => ex. a is a local variable, and is a Fixnum object with value 1)
  
  @a = 2
  Answer - @a is an instance variable that is a Fixnum object with a value of 2
  
  user = User.new
  Answer - This will create (instantiate) a User object and assign the object to the variable user.

  user.name
  Answer - This will return (get) the value associated with the instance variable "name" of the user object.
           (This could also be calling a method, but based on the use of "name", probably not.) 
  
  user.name = "Joe"
  Answer - This is setting the instance variable "name" of instance "user" to "Joe".

2.  How does a class mixin a module?
    Answer - With an include statement.  (I needed to have provided an example here)

3.  What's the difference between class variables and instance variables?
    Answer - A class variable affects the state of all instances within the class whereas the 
             instance variable only affects a specific object create from the class.
             (I should have noted that class variables start with @@ and are shared by all instances whereas
             instance variables start with @ and are not shared.)

4.  What does attr_accessor do?
    Answer - This sets up getters and setters for the specific instance variables referenced.

5.  How would you describe this expression: Dog.some_method
    Answer - This would execute (or call) a class method in the Class Dog.

6.  In Ruby, what's the difference between subclassing and mixing in modules?
    Answer - Subclassing is defining attributes and behaviors that are unique to a smaller class of an object.  
    (i.e.  A Cat is a subclass of an Animal)  The subclass has all of the attributes and behaviors that the higher
    Class has, as well as those that are specific to its nature.  Mixing in a module provides a mechanism to 
    add behaviors that are not specific to any Class or subclass. 

7.  Given that I can instantiate a user like this: User.new('Bob'), what would the initialize method look like for
	the User class?
    Answer - 
    		def initialize(name)
    		  @name = name
    		end

8.  Can you call instance methods of the same class from other instance methods in that class?
    Answer - Yes

9.  When you get stuck, what's the process you use to try to trap the error?
    Answer - Use the "pry" gem to set a binding.pry at a location where you are having problems.  This will allow
             you to interrupt the execution at that point and then interrogate and/or set variables that will 
             enable you to locate the problem.
